version: "3.8"
services:
  # Traefik - reverse proxy and dashboard
  traefik:
    image: traefik:v2.10
    container_name: wordpress-dev-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.dashboard.address=:8081"
      - "--providers.docker.network=wp_network"
      - "--providers.docker.defaultRule=Host(`{{ normalize .Name }}.localhost`)"
    ports:
      - "${TRAEFIK_PORT:-8000}:80"  # Map Traefik HTTP port to configurable port
      - "8081:8081"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wp_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=dashboard"
      - "traefik.http.routers.traefik.service=api@internal"
    restart: always

  # Database
  db:
    image: mysql:5.7
    container_name: wordpress-dev-db
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - wp_network
    # Add explicit healthcheck so WordPress waits for MySQL to be ready
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # WordPress
  wordpress:
    image: wordpress:latest
    container_name: wordpress-dev-wordpress
    depends_on:
      db:
        condition: service_healthy
    # Add port mapping back for direct access
    ports:
      - "${WP_PORT:-80}:80"
    restart: always
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: ${DB_NAME}
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DEBUG: ${WP_DEBUG:-1}
    volumes:
      - ${THEMES_PATH:-./themes}:/var/www/html/wp-content/themes:rw
      - wp_content:/var/www/html/wp-content/plugins
      - wp_content:/var/www/html/wp-content/uploads
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"  # Run container as host user to avoid permission issues
    networks:
      - wp_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wordpress.rule=Host(`wp.localhost`)"
      - "traefik.http.routers.wordpress.entrypoints=web"
      - "traefik.http.services.wordpress.loadbalancer.server.port=80"

  # Next.js Frontend
  nextjs:
    image: node:20-alpine
    container_name: wordpress-dev-nextjs
    command: sh -c "cd /app && if [ -d node_modules ] && [ -f package.json ]; then npm run dev; else echo 'Starting HTTP server'; npx http-server -p 3000; fi"
    volumes:
      - ./nextjs-frontend:/app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - WORDPRESS_API_URL=http://wordpress:80/wp-json
      - NEXT_PUBLIC_WORDPRESS_URL=http://${DOMAIN:-localhost}
      - HOSTNAME=0.0.0.0
      - PORT=3000
    depends_on:
      - wordpress
    networks:
      - wp_network
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`next.localhost`)"
      - "traefik.http.routers.nextjs.entrypoints=web"
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"

  # Storybook
  storybook:
    image: nginx:alpine
    container_name: wordpress-dev-storybook
    volumes:
      - ./nextjs-frontend:/app:ro
    ports:
      - "6007:80"
    depends_on:
      - nextjs
    networks:
      - wp_network
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.storybook.rule=Host(`storybook.localhost`)"
      - "traefik.http.routers.storybook.entrypoints=web"
      - "traefik.http.services.storybook.loadbalancer.server.port=80"
    command: >
      sh -c "
        if [ ! -d /app ] || [ ! -f /app/package.json ]; then
          echo 'ERROR: Next.js project not found!' > /usr/share/nginx/html/index.html;
          echo '<h1>Error: Next.js project not initialized!</h1><p>Please run <code>./create-nextjs-frontend.sh</code> first to set up the project with Storybook.</p>' > /usr/share/nginx/html/index.html;
          nginx -g 'daemon off;';
        elif [ ! -d /app/.storybook ]; then
          echo '<h1>Error: Storybook configuration not found!</h1><p>Please run <code>./create-nextjs-frontend.sh</code> to properly set up Storybook.</p>' > /usr/share/nginx/html/index.html;
          nginx -g 'daemon off;';
        else
          echo '<h1>Storybook Development Server</h1>' > /usr/share/nginx/html/index.html;
          echo '<p>Storybook is configured but not started. To start Storybook:</p>' >> /usr/share/nginx/html/index.html;
          echo '<ol>' >> /usr/share/nginx/html/index.html;
          echo '<li>Run: <code>cd nextjs-frontend && npm run storybook</code></li>' >> /usr/share/nginx/html/index.html;
          echo '<li>Or: <code>cd nextjs-frontend && npm run build-storybook</code> to create a static build</li>' >> /usr/share/nginx/html/index.html;
          echo '</ol>' >> /usr/share/nginx/html/index.html;
          nginx -g 'daemon off;';
        fi
      "

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    depends_on:
      - db
    # Add port mapping back for direct access
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - wp_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`pma.localhost`)"
      - "traefik.http.routers.phpmyadmin.entrypoints=web"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"

volumes:
  db_data:
  wp_content:

networks:
  wp_network:
    driver: bridge