version: "3.8"
services:
  # Database
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - wp_network
    # Add explicit healthcheck so WordPress waits for MySQL to be ready
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # WordPress
  wordpress:
    image: wordpress:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${WP_PORT:-80}:80" # Use standard HTTP port or value from .env
    restart: always
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: ${DB_NAME}
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DEBUG: ${WP_DEBUG:-1}
    volumes:
      - ${THEMES_PATH:-./themes}:/var/www/html/wp-content/themes:rw
      - wp_content:/var/www/html/wp-content/plugins
      - wp_content:/var/www/html/wp-content/uploads
    user: "${UID:-1000}:${GID:-1000}"  # Run container as host user to avoid permission issues
    networks:
      - wp_network

  # Next.js Frontend
  nextjs:
    build:
      context: . # Use root where Dockerfile is located
      dockerfile: Dockerfile # Explicitly specify Dockerfile
      args:
        - NEXT_PUBLIC_WORDPRESS_API_URL=http://wordpress:80/wp-json
    ports:
      - "3000:3000" # Use standard Next.js port
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_WORDPRESS_API_URL=http://wordpress:80/wp-json
      - NEXT_PUBLIC_WORDPRESS_URL=http://${DOMAIN:-localhost}
      - HOSTNAME=0.0.0.0
      - PORT=3000
    depends_on:
      - wordpress
    networks:
      - wp_network
    restart: always

  # Storybook
  storybook:
    build:
      context: . # Use root context
      dockerfile: Dockerfile.storybook
    ports:
      - "6006:80" # Map Storybook to port 6006, which is the standard Storybook port
    depends_on:
      - nextjs
    networks:
      - wp_network
    restart: always

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    depends_on:
      - db
    ports:
      - "8080:80" # Expose phpMyAdmin on standard port 8080
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - wp_network

volumes:
  db_data:
  wp_content:

networks:
  wp_network:
    driver: bridge